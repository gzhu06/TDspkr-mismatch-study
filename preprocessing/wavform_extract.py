import sys
import os
sys.path.append(os.getcwd())
import utils

from glob import glob
import librosa
import librosa.display
import numpy as np
import pandas as pd 
from multiprocessing import Pool
from tqdm import tqdm
from time import time
import argparse
import random

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument("-config_file", type=str, default=os.path.join(os.getcwd(), 'parameters.json'), help="config file")
args = parser.parse_args()

config = utils.Params(args.config_file)

def find_files(directory, sample_num=None, pattern='**/*.wav'):
    print(os.path.join(directory, pattern))
    all_files = glob(os.path.join(directory, pattern), recursive=True)
    if sample_num is not None:
        sampled_files = random.sample(all_files, sample_num)
    else:
        sampled_files = glob(os.path.join(directory, pattern), recursive=True)
    print(len(sampled_files))
    return sampled_files

def read_audio(filename, sample_rate=config.sr):
    audio, sr = librosa.load(filename, sr=sample_rate, mono=True)
    return audio

def features(libri, out_dir=config.data_o, name='0'):
    """
    main function for extracting feature files from wavform into npy

    Args:
        libri (dict): dictionary of dataset to be ectracted, generated by data_catalog
        out_dir (string): folderpath for saving extracted features

    Raises:
        loadError: audio file error.
    """
    os.makedirs(out_dir, exist_ok=True)
    for i in tqdm(range(len(libri))):
        filename = libri[i:i+1]['filename'].values[0]        
        target_filename_partial = os.path.join(out_dir, filename.split("/")[-3] + '-' + filename.split("/")[-2] + '-' + filename.split("/")[-1].split('.')[0])  #clean

        try:
            raw_audio = read_audio(filename)
        except:
            print(filename, 'file error!')
            continue
        
        sample_num = int(config.seg_len * config.sr)
        
        if raw_audio.shape[0] < sample_num:
            print(raw_audio.shape[0])
            print('there is an error in file:',filename)
            continue
        else:
            target_filename = target_filename_partial + '.pkl'
            utils.array2pickle(raw_audio, target_filename)

def preprocess_and_save(wav_dir, out_dir):
    
    if 'voxceleb2' in wav_dir.split('/'):
        pattern = '**/*.m4a'
    else:
        pattern = '**/*.wav'
    libri = data_catalog(wav_dir, pattern=pattern) 

    print("extract fbank from audio and save as pickle, using multiprocessing pool........ ")
    p = Pool(5)
    patch = int(len(libri)/5)
    for i in range(5):
        if i < 4:
            slibri = libri[i * patch: (i+1) * patch]
        else:
            slibri = libri[i * patch:]
        print("task %s slibri length: %d" %(i, len(slibri)))
        p.apply_async(features, args=(slibri, out_dir, i))
    print('Waiting for all subprocesses done...')
    p.close()
    p.join()

def data_catalog(dataset_dir, pattern='*.pkl'):
    libri = pd.DataFrame()
    if 'aug' in dataset_dir:
        sample_num = 1000000
    else:
        sample_num = None
    libri['filename'] = find_files(dataset_dir, sample_num=sample_num, pattern=pattern)
    if pattern == '**/*.wav':
        libri['speaker_id'] = libri['filename'].apply(lambda x: x.split('/')[-3])
        # libri['speaker_id'] = libri['filename'].apply(lambda x: x.split('/')[-2]) #(test)
    else:
        libri['speaker_id'] = libri['filename'].apply(lambda x: x.split('/')[-1].split('-')[0])

    return libri

def test(out_dir=config.data_o):
    # libri = data_catalog()
    filename = "/storage/ge/voxceleb2/test/aac/id07426/GlWomRXtbt8/00042.m4a"   
    raw_audio = read_audio(filename)
    print(raw_audio.shape)
    exit()
    frame_num = int(config.seg_len * config.sr)
    hop_num = int(config.hop_size / 1000 * config.sr)
    num_segments = int(np.floor((raw_audio.shape[0] - frame_num * 2) / hop_num))
    print(num_segments)
    exit()
    sample_num = int(config.seg_len * config.sr)
    print(sample_num)
    num_segments = int(np.floor(raw_audio.shape[0] / sample_num))
    print(num_segments)
    
    target_filename_partial = os.path.join(out_dir, filename.split("/")[-2] + '-' + filename.split("/")[-1].split('.')[0])  #clean
    print(target_filename_partial)
    feature = raw_audio[:sample_num]
    utils.array2pickle(feature, target_filename_partial)
    exit()
    pieces = int(feature.shape[1]/config.seg_len)
    for i in range(pieces):
        temp_feature = feature[:, i*config.seg_len: (i+1)*config.seg_len]
        target_filename = target_filename_partial + '-' + str(i) +'.npy'
        print(target_filename)

if __name__ == '__main__':
    # test
#     test()
    preprocess_and_save(config.data_i, config.data_o)
